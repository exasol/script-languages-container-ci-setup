import nox

# imports all nox task provided by the toolbox
from exasol.toolbox.nox.tasks import *

# default actions to be run if nothing is explicitly specified with the -s option
nox.options.sessions = ["project:fix"]

# isort: off

import sys
from dataclasses import dataclass
from noxconfig import PROJECT_CONFIG
from nox import Session
import subprocess
import json
from typing import Union
from pathlib import Path
import argparse
from exasol.toolbox.metrics import Format
from tempfile import TemporaryDirectory

# isort: on


def total_coverage(file: Union[str, Path]) -> float:
    with TemporaryDirectory() as tmpdir:
        tmp_dir = Path(tmpdir)
        report = tmp_dir / "coverage.json"
        p = subprocess.run(
            ["coverage", "json", f"--data-file={file}", "-o", f"{report}"],
            capture_output=True,
            check=False,
            encoding="utf-8",
        )
        stdout = p.stdout.strip()
        if p.returncode != 0:
            message = (
                f"The following command"
                f" returned non-zero exit status {p.returncode}:\n"
                f'  {" ".join(p.args)}\n'
                f"{stdout}"
            )
            if (p.returncode == 1) and (stdout == "No data to report."):
                print(f"{message}\nReturning total coverage 100 %.", file=sys.stderr)
                return 100.0
            else:
                raise RuntimeError(message)

        with open(report, encoding="utf-8") as r:
            print(f"Writing coverage to {report}")
            data = json.load(r)
            total: float = data["totals"]["percent_covered"]
        print(f"returning {total}")
        return total


# Report which files are missing in particular
# and link to the nox tasks named in the error message
# E.g.
# File ".coverage" is missing.
# Please make sure to run nox task `test:coverage` first.
@dataclass
class RequiredFile:
    """
    Describes a required file and the related nox task to generate this
    file.
    """

    def __init__(self, file: Union[Path, str], task: str):
        self.file = file if isinstance(file, Path) else PROJECT_CONFIG.root / file
        self.task = task

    def __str__(self) -> str:
        return f"{self.file.name} generated by `{self.task}`"


@nox.session(name="overridden:project:report", python=False)
def report(session: Session) -> None:
    formats = tuple(fmt.name.lower() for fmt in Format)
    usage = "nox -s project:report -- [options]"
    parser = argparse.ArgumentParser(
        description="Generates status report for the project", usage=usage
    )
    parser.add_argument(
        "-f",
        "--format",
        type=str,
        default=formats[0],
        help="Output format to produce.",
        choices=formats,
    )
    required_files = [
        RequiredFile(".coverage", "test:coverage"),
        RequiredFile(".lint.txt", "lint:code"),
        RequiredFile(".security.json", "lint:security"),
    ]
    if missing_files := [f for f in required_files if not f.file.exists()]:
        missing = "\n- file ".join(str(f) for f in missing_files)
        session.error(
            "Some required files are missing.\n"
            "Please make sure you run the related nox tasks first:\n"
            f"{missing}"
        )
    total_coverage(".coverage")
    # sha1 = str(
    #     session.run("git", "rev-parse", "HEAD", external=True, silent=True)
    # ).strip()
    # args: argparse.Namespace = parser.parse_args(args=session.posargs)
    # project_report = create_report(commit=sha1)
    # fmt = Format.from_string(args.format)
    #
    # print(format_report(project_report, fmt))
